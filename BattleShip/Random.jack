/* Random.jack, released under the BSD 2-Clause License, also known as Simplified BSD or FreeBSD License" 
 * Copyright (c) 2013, Rowan Limb 
 * All rights reserved. 
 * This software implements a PRNG based on Linear Congruential Generator (Schrage Method). 
 * Based on method documented here: http://www.cems.uwe.ac.uk/~irjohnso/coursenotes/ufeen8-15-m/p1192-parkmiller.pdf
 * and using constants for A and M from  "Tables of Linear Congruential Generators of Different Sizes and Good Lattice Structure" by Pierre L'Ecuyer, 1999 (citeseer: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.1024) 
*/

class Random { 
    static int seed; 
    static int A; 
    static int M; 
    static int Q; 
    static int R; 

    function void setSeed(int newSeed) { 
        let seed = newSeed; 
        if(seed=0) { 
           let seed=1; 
        } 
        let A=219; 
        let M = 32749; 
        let Q = M/A; 
        let R = Utils.mod(M,A); 
        return; 
    } 

    /* returns a random int in range 0..(M-1) inclusive */ 
    function int rand() { 
        var int test; 
        let test = (A*(Utils.mod(seed,Q)))-(R*(seed/Q)); 
        if(test<0) { 
           let seed=test+M; 
        } 
        else { 
           let seed=test; 
        } 
        return seed; 
    } 

    /* returns a random int in range low..high inclusive */
    function int randRange(int low, int high) {
       var int scale;
       var int rand;
       let scale = (M / (high - low + 1));
       let rand = (Random.rand() / scale) + low;
       
       // =rand= can be greater than =high= because =scale= suffers from integer
       // truncation.  The correct calculation should be
       //    rand = MulDiv(LCGRandom.rand(), high+1 - low, M) + low
       // Where MulDiv(a, b, c) multiplies 16-bit =a= by 16-bit =b= giving 32 bit
       // result, then divides 32 bit result by 16-bit =c=.
       //
       // MulDiv is hard to implement in Jack, so the cheap fix is to try again
       // if the number was too big.
       
       while (rand > high) {
          let rand = (Random.rand() / scale) + low;
          }
       return rand;
    }
} 

